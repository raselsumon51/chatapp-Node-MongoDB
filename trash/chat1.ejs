<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
    <!-- <script src="https://cdn.tailwindcss.com"></script> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <script>
        var socket = io();
        var username = '<%= username %>';

        // Function to send message to a specific person
        function sendPrivateMessage(receiver) {
            console.log(`Receiver is ${receiver}`)
            var message = document.getElementById('message_' + receiver).value;
        //    alert(`receiver: ${receiver}, sender: ${username}, message: ${message}`);
            socket.emit('chat message', { sender: username, receiver: receiver, message: message });
            document.getElementById('message_' + receiver).value = '';
        }

       

        // Function to receive private message from the server
        // socket.on('private message', function(data) {
        //     //alert(`sender : ${data.sender} receiver : ${data.message}`)
        //     var messages = document.getElementById('messages');
        //     var li = document.createElement('li');
        //     li.textContent = `${data.sender}: ${data.message}`;
        //     messages.appendChild(li);
        // });

    document.addEventListener('DOMContentLoaded', function() {
    // Assuming `messages` is an array of message objects fetched from the server and rendered on the page
    // Example: let messages = [...]; // fetched and rendered server-side

    // Once the messages are loaded, set up the socket listener for private messages
    socket.on('private message', function(data) {
       
        
        // Create a new li element
        const li = document.createElement('li');

        // Determine the sender and set the appropriate classes and content
        if (data.sender === username) {
            // alert(`sender : ${data.sender} receiver : ${data.message}`);
            li.className = 'd-flex justify-content-end mb-4';
            li.innerHTML = `
                <div class="message other-message p-3 rounded">
                    ${data.message}
                </div>
            `;
        } else {
            // alert(`sender : ${data.sender} receiver : ${data.message}`);
            li.className = 'd-flex justify-content-start mb-4';
            li.innerHTML = `
                <div class="message my-message p-3 rounded">
                    ${data.message}
                </div>
            `;
        }

        // Append the new li to the messages list
        const messagesList = document.getElementById('messages-list');
        messagesList.appendChild(li);
    });
});



        // Send the username to the server when connected
        socket.on('connect', function() {
            socket.emit('join', username);
        });
    </script>
    <style>
        body {
            background-color: #f4f7f6;
        }
        .chat-app .people-list {
            height: 100%;
        }
        .chat-app .chat-history {
            height: 100%;
        }
        .chat-app .chat-message {
            position: sticky;
            bottom: 0;
            background: white;
        }
        .people-list .chat-list img {
            width: 45px;
            overflow: auto;
        }
        .chat .chat-header img,
        .chat .chat-history .message-data img {
            width: 40px;
        }
        .chat .chat-history .message {
            max-width: 60%;
            height: 60px !important;
        }
        .chat .chat-history .message.my-message {
            background: #efefef;
        }
        .chat .chat-history .message.other-message {
            background: #e8f1f3;
        }
        .chat-list{
            height: 600px;
            overflow-y: auto !important;
        }
        .chat{
            height: 680px;
            overflow-y: auto !important;
        }
        a:link { 
  text-decoration: none; 
}
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="card chat-app">
            <div class="row g-0">
                <div class="col-md-4 border-end people-list">
                    <div class="p-3">
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="fa fa-search"></i></span>
                            <input type="text" class="form-control" placeholder="Search...">
                        </div>
                        <ul class="list-unstyled chat-list">
                            <% users.forEach(user => { %>
                                <li class="user-item d-flex align-items-center p-2">
                                    <a href="/chat/<%= user.username %>" class="user-link" >
                                        <img src="https://bootdey.com/img/Content/avatar/avatar1.png" alt="avatar" class="rounded-circle me-2">
                                        <div>
                                            <div class="fw-bold"><%= user.username %></div>
                                            <div class="text-muted"><i class="fa fa-circle text-danger"></i> Active </div>
                                        </div>
                                    </a>
                                </li>
                            <% }); %>
                        </ul>
                        
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="chat">
                       
                        <div class="chat-history p-3">
                            <ul id="messages-list">
                                <% messages.forEach(message => { %>
                                    <% if (message.sender === username) { %>
                                        <li class="d-flex justify-content-end mb-4">
                                            <div class="message other-message p-3 rounded">
                                                <%= message.message %>
                                            </div>
                                        </li>
                                    <% } else { %>
                                        <li class="d-flex justify-content-start mb-4">
                                            <div class="message my-message p-3 rounded">
                                                <%= message.message %>
                                            </div>
                                        </li>
                                    <% } %>
                                <% }); %>
                            </ul>
                        </div>
                        
                        <div class="chat-message" id="message_form_<%= receiver %>">
                            <div class="input-group">
                                <input type="text" id="message_<%= receiver %>" class="form-control" placeholder="Enter text here..." />

                            </div>
                            <div class="input-group mt-2">
                                <button onclick="sendPrivateMessage('<%= receiver %>')" class="btn btn-primary" type="button">Send</button>
                            </div>               
                        </div>         
                    </div>
                </div>
                
            </div>
        </div>
    </div>        

</body>

</html>


    <!-- <script>
        const userItems = document.querySelectorAll('.user-item');
    
        // Attach click event listener to each list item
        userItems.forEach(item => {
            item.addEventListener('click', function() {
                const userId = this.getAttribute('data-user-id');
                // alert(userId);

                fetch(`/chat/${userId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                        // Add any other headers if required
                    },
                    // You can add a request body if needed
                    // body: JSON.stringify({}) 
                })
                .then(response => {
                    // Handle the response here
                })
                .catch(error => {
                    // Handle errors here
                });
            });
        });
    </script> -->
